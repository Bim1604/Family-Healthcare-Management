/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dang.view;

import dang.dao.RegistrationInterface;
import dang.dao.RegistrationServer;
import dang.dto.RegistrationDTO;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import dang.invalid.Invalid;
import dang.logger.Log;
import java.io.IOException;

/**
 *
 * @author Admin
 */
public class RegistrationClient extends javax.swing.JFrame {

    private RegistrationInterface registrationInterface;
    private final String fileName = "RegistrationData.txt";
    private Registry reg;
    RegistrationFullModel registrationFullModel;
    RegistrationServer registrationsServer;
    boolean addNewRegistration = false;
    Log log;

    /**
     * Creates new form RegistrationClient
     */
    public RegistrationClient() {
        initComponents();
        try {
            reg = LocateRegistry.getRegistry(1431);
            registrationInterface = (RegistrationInterface) reg.lookup("rmi://localhost:1431/RegistrationData");
            registrationsServer = new RegistrationServer(fileName);
            registrationsServer.findAllRegistrations();
            registrationsServer.getRegistrationList();
            registrationFullModel = new RegistrationFullModel(registrationsServer);
            tblRegistration.setModel(registrationFullModel);
            btnAddNew.setEnabled(true);
            btnDelete.setEnabled(false);
            btnSave.setEnabled(false);
            try {
                log = new Log("log.txt");
            } catch (SecurityException | IOException ex) {
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe(ex.getMessage());
            }
        } catch (RemoteException | NotBoundException e) {
            JOptionPane.showMessageDialog(this, "Can't create a stub");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnSearchByName = new javax.swing.JButton();
        btnGetAll = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtAdults = new javax.swing.JTextField();
        txtChildren = new javax.swing.JTextField();
        txtNumberOfMember = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtRegistrationID = new javax.swing.JTextField();
        btnFindByID = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        rdMale = new javax.swing.JRadioButton();
        rdFemale = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Main part:"));

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegistration);

        jLabel2.setText("Sort by Name:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search by Name:");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        btnGetAll.setText("Get all Data");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearchByName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(btnGetAll)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(182, 182, 182)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btnGetAll)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Detailed part:"));

        jLabel4.setText("Registration ID:");

        jLabel5.setText("Full Name:");

        jLabel6.setText("Age:");

        jLabel7.setText("Email:");

        jLabel8.setText("Phone:");

        jLabel9.setText("Address:");

        jLabel10.setText("Number of member:");

        jLabel11.setText("Include:");

        jLabel12.setText("Adults");

        jLabel13.setText("Children");

        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane2.setViewportView(txtAddress);

        btnFindByID.setText("Find by ID");
        btnFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByIDActionPerformed(evt);
            }
        });

        jLabel14.setText("Sex:");

        buttonGroup1.add(rdMale);
        rdMale.setSelected(true);
        rdMale.setText("Male");

        buttonGroup1.add(rdFemale);
        rdFemale.setText("Female");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtChildren, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel13))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnAddNew)
                                .addGap(59, 59, 59)
                                .addComponent(btnSave)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel12))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(btnDelete)))
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPhone)
                            .addComponent(jScrollPane2)
                            .addComponent(txtFullName)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRegistrationID)
                                .addGap(18, 18, 18)
                                .addComponent(btnFindByID))
                            .addComponent(txtEmail)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(79, 79, 79)
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(rdMale)
                                        .addGap(18, 18, 18)
                                        .addComponent(rdFemale))
                                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(20, 20, 20))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByID))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(rdMale)
                        .addComponent(rdFemale)))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtChildren, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnAddNew)
                    .addComponent(btnDelete))
                .addGap(35, 35, 35))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Family Healthcare Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(333, 333, 333)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void clearTextField() {
        txtRegistrationID.setText("");
        txtFullName.setText("");
        txtAge.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        txtNumberOfMember.setText("");
        txtChildren.setText("");
        txtAdults.setText("");
        rdMale.setSelected(true);
    }
    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        clearTextField();
        btnSave.setEnabled(true);
        btnDelete.setEnabled(false);
        txtRegistrationID.setEditable(true);
        addNewRegistration = true;
    }//GEN-LAST:event_btnAddNewActionPerformed
    public RegistrationDTO getInputField() {
        String registrationID = txtRegistrationID.getText();
        String fullName = txtFullName.getText();
        int age;
        boolean gender = true;
        if (rdFemale.isSelected()) {
            gender = false;
        }
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String address = txtAddress.getText();
        int numberOfMember;
        int numberOfChildren;
        int numberOfAdults;
        try {
            age = Integer.parseInt(txtAge.getText());
            if (age == 0) {
                JOptionPane.showMessageDialog(this, "Invalid age");
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe("Invalid age");
                return null;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid age");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid age");
            return null;
        }
        try {
            numberOfMember = Integer.parseInt(txtNumberOfMember.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Number Of Member");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Number Of Member");
            return null;
        }
        try {
            numberOfChildren = Integer.parseInt(txtChildren.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Number Of Children");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Number Of Children");
            return null;
        }
        try {
            numberOfAdults = Integer.parseInt(txtAdults.getText());
        } catch (NumberFormatException e) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Number Of Adluts");
            JOptionPane.showMessageDialog(this, "Invalid Number Of Adluts");
            return null;
        }
        RegistrationDTO registrationDTO = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numberOfMember, numberOfChildren, numberOfAdults);
        return registrationDTO;
    }

    public boolean checkValid(RegistrationDTO dto) {
        Invalid invalid = new Invalid();
        boolean registrationIDCheck = invalid.checkRegistrationID(dto.getRegistrationID());
        boolean fullNameCheck = invalid.checkFullName(dto.getFullName());
        boolean emailCheck = invalid.checkEmail(dto.getEmail());
        boolean phoneCheck = invalid.checkPhone(dto.getPhone());
        boolean numberOfChildrenCheck = invalid.checkNumberOfChildren(dto.getNumberOfChildren());
        boolean numberOfAdultsCheck = invalid.checkNumberOfAdults(dto.getNumberOfAdults());
        boolean numberOfMemberCheck = invalid.checkTotalMember(dto.getNumberOfAdults(), dto.getNumberOfChildren(), dto.getNumberOfMember());
        boolean addressCheck = invalid.checkAddress(dto.getAddress());
        if (!registrationIDCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Registration ID");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Registration ID");
            return false;
        }
        if (!fullNameCheck) {
            JOptionPane.showMessageDialog(this, "Invalid FullName");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid FullName");
            return false;
        }
        if (!emailCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Email");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Email");
            return false;
        }
        if (!phoneCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Phone");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Phone");
            return false;
        }
        if (!numberOfChildrenCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Number Of Children");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Number Of Children");
            return false;
        }
        if (!numberOfAdultsCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Number Of Adults");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Number Of Adults");
            return false;
        }
        if (!numberOfMemberCheck) {
            JOptionPane.showMessageDialog(this, "Number of Member isn't equal to Plus of children and adults");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Number of Member isn't equal to Plus of children and adults");
            return false;
        }
        if (!addressCheck) {
            JOptionPane.showMessageDialog(this, "Invalid Address");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Address");
            return false;
        }
        return true;
    }

    public boolean checkDuplicateID(String registrationID) throws RemoteException {
        for (RegistrationDTO findAllRegistration : registrationInterface.findAllRegistrations()) {
            if (findAllRegistration.getRegistrationID().equals(registrationID)) {
                return true;
            }
        }
        return false;
    }

    public boolean checkConnection() {
        try {
            registrationInterface = (RegistrationInterface) reg.lookup("rmi://localhost:1431/RegistrationData");
        } catch (RemoteException | NotBoundException ex) {
            JOptionPane.showMessageDialog(this, "Server Stopped");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
            return false;
        }
        return true;
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        RegistrationDTO registrationDTO = getInputField();
        if (registrationDTO == null) {
            return;
        }
        boolean checkValid = checkValid(registrationDTO);
        if (!checkValid) {
            return;
        }
        try {
            if (addNewRegistration) {
                boolean checkDuplicate = checkDuplicateID(registrationDTO.getRegistrationID());
                if (!checkDuplicate) {
                    if (registrationInterface.createRegistration(registrationDTO)) {
                        registrationFullModel.getRegistrationServer().getRegistrationList().add(registrationDTO);
                        tblRegistration.updateUI();
                        btnAddNew.setEnabled(true);
                        btnDelete.setEnabled(false);
                        btnSave.setEnabled(false);
                        txtRegistrationID.setEditable(true);
                        addNewRegistration = false;
                        clearTextField();
                        JOptionPane.showMessageDialog(this, "Data save");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Duplicate Registration ID");
                    Log.logger.setLevel(Level.SEVERE);
                    Log.logger.severe("Duplicate Registration ID");
                }
            } else {
                if (registrationInterface.updateRegistration(registrationDTO)) {
                    int selectRow = tblRegistration.getSelectedRow();
                    registrationFullModel.getRegistrationServer().getRegistrationList().set(selectRow, registrationDTO);
                    tblRegistration.updateUI();
                    btnAddNew.setEnabled(true);
                    btnDelete.setEnabled(false);
                    btnSave.setEnabled(false);
                    txtRegistrationID.setEditable(true);
                    addNewRegistration = false;
                    clearTextField();
                    JOptionPane.showMessageDialog(this, "Data save");
                } else {
                    JOptionPane.showMessageDialog(this, "Update failed");
                    Log.logger.setLevel(Level.SEVERE);
                    Log.logger.severe("Update failed");
                }
            }
        } catch (RemoteException ex) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
        } catch (NullPointerException ex) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        try {
            ArrayList<RegistrationDTO> registrationDTO = registrationInterface.findAllRegistrations();
            registrationFullModel.getRegistrationServer().getRegistrationList().clear();
            for (RegistrationDTO dto : registrationDTO) {
                registrationFullModel.getRegistrationServer().getRegistrationList().add(dto);
            }
            tblRegistration.updateUI();
            addNewRegistration = false;
            txtRegistrationID.setEditable(true);
        } catch (RemoteException e) {
            JOptionPane.showMessageDialog(this, "No data to Get");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("No data to Get");
        }

    }//GEN-LAST:event_btnGetAllActionPerformed

    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        int selectRow = tblRegistration.getSelectedRow();
        String registrationID = registrationFullModel.getRegistrationServer().getRegistrationList().get(selectRow).getRegistrationID();
        try {
            RegistrationDTO registrationDTO = registrationInterface.findByRegistrationID(registrationID);
            txtRegistrationID.setText(registrationDTO.getRegistrationID());
            txtFullName.setText(registrationDTO.getFullName());
            txtAge.setText(registrationDTO.getAge() + "");
            boolean gender = registrationDTO.isGender();
            rdMale.setSelected(true);
            if (!gender) {
                rdFemale.setSelected(true);
            }
            txtEmail.setText(registrationDTO.getEmail());
            txtPhone.setText(registrationDTO.getPhone());
            txtAddress.setText(registrationDTO.getAddress());
            txtNumberOfMember.setText(registrationDTO.getNumberOfMember() + "");
            txtChildren.setText(registrationDTO.getNumberOfChildren() + "");
            txtAdults.setText(registrationDTO.getNumberOfAdults() + "");
            txtRegistrationID.setEditable(false);
            btnAddNew.setEnabled(false);
            btnSave.setEnabled(true);
            btnDelete.setEnabled(true);
            addNewRegistration = false;
        } catch (RemoteException ex) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
        }
    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void btnFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByIDActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        String registrationID = txtRegistrationID.getText();
        try {
            RegistrationDTO registrationDTO = registrationInterface.findByRegistrationID(registrationID);
            if (registrationDTO != null) {
                registrationFullModel.getRegistrationServer().getRegistrationList().clear();
                registrationFullModel.getRegistrationServer().getRegistrationList().add(registrationDTO);
                tblRegistration.updateUI();
                txtRegistrationID.setText(registrationDTO.getRegistrationID());
                txtFullName.setText(registrationDTO.getFullName());
                txtAge.setText(registrationDTO.getAge() + "");
                boolean gender = registrationDTO.isGender();
                rdMale.setSelected(true);
                if (!gender) {
                    rdFemale.setSelected(true);
                }
                txtEmail.setText(registrationDTO.getEmail());
                txtPhone.setText(registrationDTO.getPhone());
                txtAddress.setText(registrationDTO.getAddress());
                txtNumberOfMember.setText(registrationDTO.getNumberOfMember() + "");
                txtChildren.setText(registrationDTO.getNumberOfChildren() + "");
                txtAdults.setText(registrationDTO.getNumberOfAdults() + "");
                txtRegistrationID.setEditable(false);
                addNewRegistration = false;
                btnAddNew.setEnabled(false);
                btnSave.setEnabled(true);
                btnDelete.setEnabled(true);
                tblRegistration.selectAll();
            } else {
                JOptionPane.showMessageDialog(this, "Not found");
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe("Not found");
            }

        } catch (RemoteException ex) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
        }
    }//GEN-LAST:event_btnFindByIDActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        String registrationID = txtRegistrationID.getText();
        int choice = JOptionPane.showConfirmDialog(this, "Do you want to remove this Registration", "Yes/No", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            try {
                if (registrationInterface.removeRegistration(registrationID)) {
                    int selectRow = tblRegistration.getSelectedRow();
                    registrationFullModel.getRegistrationServer().getRegistrationList().remove(selectRow);
                    tblRegistration.updateUI();
                    txtRegistrationID.setEditable(true);
                    btnAddNew.setEnabled(true);
                    btnDelete.setEnabled(false);
                    btnSave.setEnabled(false);
                    clearTextField();
                    JOptionPane.showMessageDialog(this, "Data save");
                } else {
                    Log.logger.setLevel(Level.SEVERE);
                    Log.logger.severe("Data save");
                }
            } catch (RemoteException ex) {
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        String searchValue = txtSearchByName.getText();
        ArrayList<RegistrationDTO> searchList;
        searchList = registrationsServer.searchByRegistrationName(searchValue);
        registrationFullModel.getRegistrationServer().getRegistrationList().clear();
        for (RegistrationDTO registrationDTO : searchList) {
            registrationFullModel.getRegistrationServer().getRegistrationList().add(registrationDTO);
        }
        tblRegistration.updateUI();
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        boolean checkConnection = checkConnection();
        if (!checkConnection) {
            return;
        }
        int choice = jComboBox1.getSelectedIndex();
        if (choice == 0) {
            registrationsServer.sortAscendingByRegistrationName();
        } else {
            registrationsServer.sortDescendingByRegistrationName();
        }
        tblRegistration.updateUI();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindByID;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdFemale;
    private javax.swing.JRadioButton rdMale;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAdults;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtChildren;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNumberOfMember;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationID;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables
}
